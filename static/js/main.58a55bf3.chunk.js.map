{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","require","App","props","inputChange","v","setState","markdown","target","value","state","bind","className","id","placeholder","this","onChange","dangerouslySetInnerHTML","__html","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uOAIIA,G,MAASC,EAAQ,KAuCNC,E,kDApCb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAaRC,YAAa,SAACC,GACZ,EAAKC,SAAS,CAACC,SAAWF,EAAEG,OAAOC,SAbnC,EAAKC,MAAQ,CACXH,SACD,s+BAOD,EAAKH,YAAc,EAAKA,YAAYO,KAAjB,gBAXH,E,qDAkBT,OACP,yBAAKC,UAAU,OAEf,yBAAKA,UAAW,wBACd,+BAAQ,6CACR,8BAAUC,GAAG,SAASC,YAAa,cAAcF,UAAU,eAAeH,MAASM,KAAKL,MAAMH,SAAUS,SAAUD,KAAKX,eAIzH,6BACE,+CACA,+BAEA,yBAAKS,GAAG,UAAUI,wBAA2B,CAACC,OAAQlB,EAAOe,KAAKL,MAAMH,kB,GAhC5DY,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.58a55bf3.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nlet marked = require(\"marked\")\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      markdown: \n    ('# hello \\n## bro \\n[Duck Duck Go](https://duckduckgo.com)'+\n    '\\nmy lovely \\n\\n    <html>\\n     <head>\\n     </head>\\n    </html>\\n\\n1. First item \\nI really like using Markdown. \\n2. Second item \\n3. Third item \\n4. Fourth item' + \n    '\\n> Dorothy followed her through many of the beautiful rooms in her castle. \\n> \\n> The Witch bade her clean the pots and kettles and sweep \\n\\n![Philadelphia\\'s Magic Gardens. This place was so cool!](https://d33wubrfki0l68.cloudfront.net/70a143fdf134aacde3740662a2a47a2a1ee0d216/276c9/assets/images/shiprock.jpg \"Philadelphia\\'s Magic Gardens\")'+\n    '\\n\\n **bold text** \\n__bold text__ \\n*cat\\'s meow* \\n>> The Witch bade her clean the pots \\n>  *Everything* is going according to **plan**.' + \n    '- First item \\n- Second item \\n- Third item \\n- Fourth item \\n*   This is the first list item. \\n  ![Tux, the Linux mascot](/assets/images/tux.png) \\n\\n`nano` \\n``Use `code` in your Markdown file.``    ' +\n    '\\n<https://www.markdownguide.org> \\n<fake@example.com> \\n <pre><code>babe</code></pre>' )\n    }\n    this.inputChange = this.inputChange.bind(this);\n  }\n\n  inputChange =(v) =>{\n    this.setState({markdown : v.target.value})\n  }\n\n  render(){return (\n    <div className=\"App\">\n   \n    <div className= \"form-group container\" >\n      <label ><h2>Input Markup</h2></label>\n      <textarea id=\"editor\" placeholder ='Enter input' className='form-control' value = {this.state.markdown} onChange={this.inputChange} ></textarea>\n    </div>\n\n\n    <div>\n      <h1>MarkDown Output</h1>\n      <div></div>\n    </div>\n      <div id=\"preview\" dangerouslySetInnerHTML = {{__html :marked(this.state.markdown) }} ></div>\n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}